package edu.iastate.cs228.hw02;import java.util.Arrays;/** * A class that implements a bag of objects by using an array. The bag is never * full. *  * @author Frank M. Carrano * @version 4.0 */public final class ResizableArrayBag<T> implements BagInterface<T> {	private T[] bag; // Cannot be final due to doubling	private int numberOfEntries;	private boolean initialized = false;	private static final int DEFAULT_CAPACITY = 25; // Initial capacity of bag	private static final int MAX_CAPACITY = 10000;	/** Creates an empty bag whose initial capacity is 25. */	public ResizableArrayBag() {		this(DEFAULT_CAPACITY);	} // end default constructor	/**	 * Creates an empty bag having a given initial capacity.	 * 	 * @param initialCapacity	 *            The integer capacity desired.	 */	public ResizableArrayBag(int initialCapacity) {		checkCapacity(initialCapacity);		// The cast is safe because the new array contains null entries		@SuppressWarnings("unchecked")		T[] tempBag = (T[]) new Object[initialCapacity]; // Unchecked cast		bag = tempBag;		numberOfEntries = 0;		initialized = true;	} // end constructor	/**	 * Creates a bag containing given entries.	 * 	 * @param contents	 *            An array of objects.	 */	public ResizableArrayBag(T[] contents) {		checkCapacity(contents.length);		bag = Arrays.copyOf(contents, contents.length);		numberOfEntries = contents.length;		initialized = true;	} // end constructor	/**	 * Adds a new entry to this bag.	 * 	 * @param newEntry	 *            The object to be added as a new entry.	 * @return True.	 */	public boolean add(T newEntry) {		checkInitialization();		if (isArrayFull()) {			doubleCapacity();		} // end if		bag[numberOfEntries] = newEntry;		numberOfEntries++;		return true;	} // end add	/**	 * Retrieves all entries that are in this bag.	 * 	 * @return A newly allocated array of all the entries in this bag.	 */	public Object[] toArray() {		checkInitialization();		// The cast is safe because the new array contains null entries.		@SuppressWarnings("unchecked")		T[] result = (T[]) new Object[numberOfEntries]; // Unchecked cast		for (int index = 0; index < numberOfEntries; index++) {			result[index] = bag[index];		} // end for		return result;	} // end toArray	/**	 * Sees whether this bag is empty.	 * 	 * @return True if this bag is empty, or false if not.	 */	public boolean isEmpty() {		return numberOfEntries == 0;	} // end isEmpty	/**	 * Gets the current number of entries in this bag.	 * 	 * @return The integer number of entries currently in this bag.	 */	public int getCurrentSize() {		return numberOfEntries;	} // end getCurrentSize	/**	 * Counts the number of times a given entry appears in this bag.	 * 	 * @param anEntry	 *            The entry to be counted.	 * @return The number of times anEntry appears in this ba.	 */	public int getFrequencyOf(T anEntry) {		checkInitialization();		int counter = 0;		for (int index = 0; index < numberOfEntries; index++) {			if (anEntry.equals(bag[index])) {				counter++;			} // end if		} // end for		return counter;	} // end getFrequencyOf	/**	 * Tests whether this bag contains a given entry.	 * 	 * @param anEntry	 *            The entry to locate.	 * @return True if this bag contains anEntry, or false otherwise.	 */	public boolean contains(T anEntry) {		checkInitialization();		return getIndexOf(anEntry) > -1; // or >= 0	} // end contains	/** Removes all entries from this bag. */	public void clear() {		while (!isEmpty())			remove();	} // end clear	/**	 * Removes one unspecified entry from this bag, if possible.	 * 	 * @return Either the removed entry, if the removal was successful, or null.	 */	public T remove() {		checkInitialization();		T result = removeEntry(numberOfEntries - 1);		return result;	} // end remove	/**	 * Removes one occurrence of a given entry from this bag.	 * 	 * @param anEntry	 *            The entry to be removed.	 * @return True if the removal was successful, or false if not.	 */	public boolean remove(T anEntry) {		checkInitialization();		int index = getIndexOf(anEntry);		T result = removeEntry(index);		return anEntry.equals(result);	} // end remove	// Locates a given entry within the array bag.	// Returns the index of the entry, if located,	// or -1 otherwise.	// Precondition: checkInitialization has been called.	private int getIndexOf(T anEntry) {		int where = -1;		boolean found = false;		int index = 0;		while (!found && (index < numberOfEntries)) {			if (anEntry.equals(bag[index])) {				found = true;				where = index;			} // end if			index++;		} // end while		// Assertion: If where > -1, anEntry is in the array bag, and it		// equals bag[where]; otherwise, anEntry is not in the array.		return where;	} // end getIndexOf	// Removes and returns the entry at a given index within the array.	// If no such entry exists, returns null.	// Precondition: 0 <= givenIndex < numberOfEntries.	// Precondition: checkInitialization has been called.	private T removeEntry(int givenIndex) {		T result = null;		if (!isEmpty() && (givenIndex >= 0)) {			result = bag[givenIndex]; // Entry to remove			int lastIndex = numberOfEntries - 1;			bag[givenIndex] = bag[lastIndex]; // Replace entry to remove with last entry			bag[lastIndex] = null; // Remove reference to last entry			numberOfEntries--;		} // end if		return result;	} // end removeEntry	// Returns true if the array bag is full, or false if not.	private boolean isArrayFull() {		return numberOfEntries >= bag.length;	} // end isArrayFull	// Doubles the size of the array bag.	// Precondition: checkInitialization has been called.	private void doubleCapacity() {		int newLength = 2 * bag.length;		checkCapacity(newLength);		bag = Arrays.copyOf(bag, newLength);	} // end doubleCapacity	// Throws an exception if the client requests a capacity that is too large.	private void checkCapacity(int capacity) {		if (capacity > MAX_CAPACITY)			throw new IllegalStateException(					"Attempt to create a bag whose capacity exceeds " + "allowed maximum of " + MAX_CAPACITY);	} // end checkCapacity	// Throws an exception if receiving object is not initialized.	private void checkInitialization() {		if (!initialized)			throw new SecurityException("Uninitialized object used " + "to call an ArrayBag method.");	} // end checkInitialization	/**	 * @author Mason Walls Creates a new bag that has all items from the current and	 *         given bag	 * @param A	 *            bag	 * @return New bag with both bag's items	 */	public BagInterface<T> union(BagInterface<T> anotherBag) {		// TODO Auto-generated method stub		ResizableArrayBag<T> bag2 = (ResizableArrayBag<T>) anotherBag;		ResizableArrayBag<T> bag3 = new ResizableArrayBag<T>(numberOfEntries + bag2.numberOfEntries);		for (int i = 0; i < bag2.numberOfEntries; i++) {			bag3.add(bag2.bag[i]);		}		for (int i = 0; i < numberOfEntries; i++) {			bag3.add(bag[i]);		}		return bag3;	}	/**	 * @author Mason Walls Creates a new bag with all items that the current bag and	 *         given bag have in common (no repeats)	 * @param A	 *            bag	 * @return A new bag	 */	public BagInterface<T> intersection(BagInterface<T> anotherBag) {		// TODO Auto-generated method stub		ResizableArrayBag<T> bag2 = (ResizableArrayBag<T>) anotherBag;		ResizableArrayBag<T> bag3 = new ResizableArrayBag<T>(numberOfEntries + bag2.numberOfEntries);		int loopCount = 0;		while (loopCount < numberOfEntries) {			for (int i = 0; i < bag2.numberOfEntries; i++) {				if (bag[loopCount].equals(bag2.bag[i]) && !bag3.contains(bag[loopCount]))					bag3.add(bag[loopCount]);			}			loopCount++;		}		return bag3;	}	/**	 * @author Mason Walls Creates a new bag with items that the are not found in	 *         both bags (x,x,x) - (x,x) returns x	 * @param A	 *            bag to compare with	 * @return A new bag with the difference of the bag and the given bag	 */	public BagInterface<T> difference(BagInterface<T> anotherBag) {		// TODO Auto-generated method stub		ResizableArrayBag<T> bag2 = (ResizableArrayBag<T>) anotherBag;		ResizableArrayBag<T> bag3 = new ResizableArrayBag<T>(numberOfEntries + bag2.numberOfEntries);		int loopCount = 0;		while (loopCount < numberOfEntries) {			bag3.add(bag[loopCount]);			loopCount++;		}		loopCount = 0;		while (loopCount < bag2.numberOfEntries) {			if (bag3.contains(bag2.bag[loopCount])) {				bag3.remove(bag2.bag[loopCount]);			}			loopCount++;		}		return bag3;	}	/**	 * @author Mason Walls Replaces the first item in the bag with the given item	 * @param An	 *            object to replace with	 * @return The item that was replaced	 */	public T replace(T replacement) {		// TODO Auto-generated method stub		T item;		if (isEmpty())			return null;		else {			item = bag[0];			bag[0] = replacement;		}		return item;	}	/**	 * @author Mason Walls	 * 	 *         Removes every instance of a given entry in the bag	 * @param The	 *            object to be removed	 */	public void removeEvery(T anEntry) {		// TODO Auto-generated method stub		for (int i = 0; i < numberOfEntries; i++) {			if (bag[i].equals(anEntry))				remove(anEntry);		}	}	/**	 * @author Mason Walls Determines if two bags of the same type are equal if they	 *         have the same length and contents true if equal, false otherwise	 * @param Another	 *            object	 * @return A boolean declaring if the bags are equal	 */	@Override	public boolean equals(Object anotherBag) {		ResizableArrayBag<T> test = new ResizableArrayBag<T>();		if (anotherBag == null || !anotherBag.getClass().equals(test.getClass())) {			return false;		}		@SuppressWarnings("unchecked")		ResizableArrayBag<T> bag2 = (ResizableArrayBag<T>) anotherBag;		if (bag2.numberOfEntries != numberOfEntries) {			return false;		}		ResizableArrayBag<T> bag3 = (ResizableArrayBag<T>) difference(bag2);		if (bag3.numberOfEntries == 0)			return true;		return false;	}} // end ResizableArrayBag